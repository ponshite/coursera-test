The cascading algorithm is key to understand which declaring will be applied
to any given element and how conflicts are handled.

Origin Precedence.
When the same property on the same target the last declaration wins.
HTML is processed sequentially, the lower on the page, the more precedence
they have.
External css is declared in the place they are linked.

When there is conflict, for example there are two rules for the same
element, but they provide different key-value pairs attributes, they
simple merge.

Inheritance.
A property defined on a parent element will be applied to all the
children of that element.

For example.. lets specify an style for the whole body.
body {
  color:red;
  font-family: Helvetica;
}


Specificity.
Most specific selector wins.

Scoring specificity.
style id  class,pseudo-class  #elements


<h2 style="color : green;">

style id  class,pseudo-class  #elements
1      0       0                  0


div p { color: green; }
style id  class,pseudo-class  #elements
0     0       0                   2


div #myParag { color: blue; }
style id  class,pseudo-class  #elements
0     1       0                 1




vs
div.big p { color:green }
style id  class,pseudo-class  #elements
0     0       1                 2


You can overwrite a css rule,
p {
 color: green !important;
 }
!important will overwrite everything, regarding if there is another rule
with higher specificity.

Summary:
Cascade: origin, merge, inheritance & specificity.
Provide precise control over targeting content while allowing maximum re-use
of style across your website.
